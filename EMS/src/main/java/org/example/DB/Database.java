package org.example.DB;

import java.sql.*;
import org.example.LoadEnv;
//These packages can be used, though not necessary as the program worked during this process.
import oracle.jdbc.pool.OracleDataSource;


public class Database {
    static Connection conn;
    static OracleDataSource atpConn;
    Statement stmt;
    String databaseUser = LoadEnv.getDatabaseUser();
    String databasePassword = LoadEnv.getDatabasePassword();
    String url = LoadEnv.getURL();
    String tnsAdmin = "/home/muturiiii/Desktop/Y3S2 Project/EMS-HR-Project/EMS/src/main/java/org/example/Wallet_EMS2"; // Hardcoded for simplicity, consider moving to LoadEnv if needed


    public Database() {
        try {
            checkConnection();
            createTables();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void checkConnection() {
        try {
            // Set the TNS_ADMIN property to the wallet path.  Consider using a constant or config.
            System.setProperty("oracle.net.tns_admin", tnsAdmin);

            // Use the database URL from the wallet configuration.  It should contain the service name.
            atpConn = new OracleDataSource();//Using Oracle packages to connect to datasource easily.
            atpConn.setURL(url);
            atpConn.setUser(databaseUser);
            atpConn.setPassword(databasePassword);
            conn = atpConn.getConnection();
            stmt = conn.createStatement();
            System.out.println("Connected to the Oracle Autonomous Database 19c successfully. Now using Database EMS2");
        } catch (SQLException e) {
            System.out.println("Failed to connect to the Oracle Autonomous Database 19c.");
            e.printStackTrace();
            // Consider throwing the exception or handling it more robustly (e.g., retrying, logging)
            throw new RuntimeException("Database connection failed", e);
        }
    }

    private void createTables() {
        try {
            // Drop tables if they exist (Good for development, REMOVE in production if not desired)
            dropTableIfExists("Attendance");
            dropTableIfExists("LeaveRequests");
            dropTableIfExists("Authorization");
            dropTableIfExists("Temporary");
            dropTableIfExists("Employees");
            dropTableIfExists("Division");
            dropTableIfExists("Departments");

            // Create tables
            String departmentTable = (
                    "CREATE TABLE Departments (" +
                            "DepartmentCode NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," + // Changed to Oracle
                            "DepartmentName VARCHAR2(100) NOT NULL )"
            );
            stmt.executeUpdate(departmentTable);
            System.out.println("Department table created successfully.");
            String divisionTable = (
                    "CREATE TABLE Division (" +
                            "DivisionID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," + // Changed to Oracle
                            "DivisionName VARCHAR2(100) NOT NULL," +
                            "DepartmentID NUMBER," +
                            "FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentCode) ON DELETE SET NULL )"
            );
            stmt.executeUpdate(divisionTable);
            System.out.println("Division table created successfully.");
            String employeeTable = (
                    "CREATE TABLE Employees (" +
                            "EmployeeID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +  // Changed to Oracle
                            "FirstName VARCHAR2(50) CONSTRAINT nn_employees_fname NOT NULL," +
                            "MiddleName VARCHAR2(50)," +
                            "LastName VARCHAR2(50) CONSTRAINT nn_employees_lname NOT NULL," +
                            "YearOfBirth DATE CONSTRAINT nn_employees_dob NOT NULL," +
                            "NationalIDNo VARCHAR2(20) CONSTRAINT nn_employees_nid UNIQUE NOT NULL," +
                            "EmailAddress VARCHAR2(100) CONSTRAINT nn_employees_email UNIQUE NOT NULL," +
                            "PhysicalAddress VARCHAR2(4000) ," +
                            "Disabilities VARCHAR2(3) DEFAULT 'NO' CONSTRAINT ck_employees_disabilities CHECK (Disabilities IN ('YES', 'NO'))," +
                            "KRAPIN VARCHAR2(20) UNIQUE CONSTRAINT nn_employees_krapin NOT NULL," +
                            "DepartmentDivision NUMBER," +
                            "Status VARCHAR2(8) DEFAULT 'Active' CONSTRAINT ck_employees_status CHECK (Status IN ('Active', 'Inactive'))," +
                            "FOREIGN KEY (DepartmentDivision) REFERENCES Division(DivisionID) ON DELETE SET NULL " +
                    ")"
            );
            stmt.executeUpdate(employeeTable);
            System.out.println("EmployeeEntry table created successfully.");
            String temporaryStaffTable = (
                    "CREATE TABLE Temporary (" +
                            " TempID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +  // Changed to Oracle
                            " FirstName VARCHAR2(50) NOT NULL," +
                            " MiddleName VARCHAR2(50)," +
                            " LastName VARCHAR2(50) NOT NULL," +
                            " WorkLevel VARCHAR2(10) NOT NULL," +
                            " YearOfBirth DATE NOT NULL," +
                            " NationalIDNo VARCHAR2(20) UNIQUE NOT NULL," +
                            " EmailAddress VARCHAR2(100) UNIQUE NOT NULL," +
                            " PhysicalAddress VARCHAR2(4000) ,"        +
                            " Disabilities VARCHAR2(3) DEFAULT 'NO'," +
                            " KRAPIN VARCHAR2(20) UNIQUE," +
                            " DepartmentDivision NUMBER," +
                            " FOREIGN KEY (DepartmentDivision) REFERENCES Division(DivisionID) ON DELETE SET NULL," +
                            " CONSTRAINT CHK_WorkLevel CHECK (WorkLevel IN ('Intern', 'Attache'))" +
                    ")"
            );
            stmt.executeUpdate(temporaryStaffTable);
            System.out.println("Temporary staff table created successfully.");
            createInitialData();
            String attendanceTable = (
                    "CREATE TABLE Attendance (" +
                            "AttendanceID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," + // Changed to Oracle
                            "EmployeeID NUMBER," +
                            "AttendanceDate DATE NOT NULL," +
                            "Status VARCHAR2(7) NOT NULL," +
                            "FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID) ON DELETE CASCADE )"
            );
            stmt.executeUpdate(attendanceTable);
            System.out.println("Attendance table created successfully.");
            String leaveTable = (
                    "CREATE TABLE LeaveRequests (" +
                            "LeaveID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," + // Changed to Oracle
                            "EmployeeID NUMBER," +
                            "StartDate DATE NOT NULL," +
                            "EndDate DATE NOT NULL," +
                            "Reason VARCHAR2(4000) NOT NULL," +
                            "Status VARCHAR2(8) DEFAULT 'Pending'," +
                            "FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID) ON DELETE CASCADE )"
            );
            stmt.executeUpdate(leaveTable);
            System.out.println("Leave requests table created successfully.");
            String authTable = (
                    "CREATE TABLE Authorization (" +
                            "AuthID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," + // Changed to Oracle
                            "AssociatedEmployeeID NUMBER NOT NULL," +
                            "Username VARCHAR2(50) UNIQUE NOT NULL," +
                            "Password VARCHAR2(255) NOT NULL," +
                            "Role VARCHAR2(20) NOT NULL,"           +
                            "FOREIGN KEY (AssociatedEmployeeID) REFERENCES Employees(EmployeeID) ON DELETE CASCADE )"
            );
            stmt.executeUpdate(authTable);
            System.out.println("Authorization table created successfully.");

        } catch (SQLException e) {
            System.err.println("Error creating tables: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("Error creating tables", e); //wrap the exception.
        }
    }

    private void dropTableIfExists(String tableName) throws SQLException {
        try {
            DatabaseMetaData dbmd = conn.getMetaData();
            ResultSet rs = dbmd.getTables(null, null, tableName.toUpperCase(), null); // Oracle stores table names in uppercase.
            if (rs.next()) {
                Statement dropStmt = conn.createStatement();
                String dropSQL = "DROP TABLE " + tableName;
                dropStmt.executeUpdate(dropSQL);
                System.out.println("Dropped table: " + tableName);
                dropStmt.close();
            }
            rs.close();
        } catch (SQLException e) {
            System.err.println("Error dropping table " + tableName + ": " + e.getMessage());
            e.printStackTrace();
            throw e; // rethrow the exception
        }
    }

    private void createInitialData() throws SQLException {
        // Use PreparedStatement to avoid SQL injection and improve performance
        String departmentInsertSQL = "INSERT INTO Departments (DepartmentName) VALUES (?)";
        try (PreparedStatement pstmt = conn.prepareStatement(departmentInsertSQL)) {
            String[] departments = {"ADMINISTRATION", "CUSTOMER SERVICE & CORPORATE AFFAIRS", "LEGAL AFFAIRS", "FINANCE & ACCOUNTING", "INFORMATION, COMMUNICATION & TECHNOLOGY"};
            for (String deptName : departments) {
                pstmt.setString(1, deptName);
                pstmt.executeUpdate();
            }
        }

        String divisionInsertSQL = "INSERT INTO Division (DivisionName, DepartmentID) VALUES (?, ?)";
        try (PreparedStatement pstmt = conn.prepareStatement(divisionInsertSQL)) {
            String[] divisions = {
                    "HUMAN RESOURCE MANAGEMENT", "ADMINISTRATION", "RECORDS AND ARCHIVE MANAGEMENT",
                    "PUBLIC RELATIONS AND MEDIA ENGAGEMENT", "STAKEHOLDER & GOVERNMENT RELATIONS",
                    "LEGAL ADVISORY", "CONTRACTS AND AGREEMENTS MANAGEMENT",
                    "SUPPLY CHAIN MANAGEMENT AND PROCUREMENT", "FINANCE", "ACCOUNTING",
                    "IT INFRASTRUCTURE", "SYSTEMS DEVELOPMENT & MAINTENANCE", "REVENUE COLLECTION & MANAGEMENT"
            };
            int[] departmentIds = {1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 3};  // Corresponding DepartmentIDs

            for (int i = 0; i < divisions.length; i++) {
                pstmt.setString(1, divisions[i]);
                pstmt.setInt(2, departmentIds[i]);
                pstmt.executeUpdate();
            }
        }
    }

    public static void main(String[] args) {
        new Database();
    }
}
